plugins {
    id "com.github.johnrengelman.shadow"
    id 'jacoco'
}

description = 'iofog-agent-daemon'

dependencies {
    compile 'com.github.docker-java:docker-java:3.2.5'
    compile 'io.netty:netty-all:4.1.34.Final'
    compile 'org.jboss.logmanager:jboss-logmanager:2.0.3.Final'
    compile 'com.jcraft:jsch:0.1.55'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.7'
    compile 'org.apache.httpcomponents:httpmime:4.5.7'
    compile 'io.sentry:sentry:1.7.21'
    compile 'junit:junit:4.12'
    compile 'com.github.oshi:oshi-core:3.13.0'
    compile 'org.slf4j:slf4j-nop:1.7.13'
    compile 'org.apache.qpid:qpid-jms-client:0.52.0'
    compile 'javax.json:javax.json-api:1.1.4'
    compile 'org.glassfish:javax.json:1.1.4'
    testCompile 'org.mockito:mockito-core:2.9.0'
    testCompile 'org.powermock:powermock-module-junit4:2.0.2'
    testCompile 'org.powermock:powermock-api-mockito2:2.0.2'
    testCompile 'org.powermock:powermock-core:2.0.2'
}

task createProperties(dependsOn: processResources) {
    doLast {
        mkdir("$buildDir/resources/main")
        new File("$buildDir/resources/main/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}

build {
    dependsOn shadowJar
}

task copyJar(type: Copy) {
    from ("$buildDir/libs/") {
        include "*-all.jar"
    }
    into file('../packaging/iofog-agent/usr/bin/')
    rename('.*?(jar$)', 'iofog-agentd.jar')
}

jar {
    manifest.attributes["Main-Class"] = 'org.eclipse.iofog.Daemon'
    manifest.attributes["Implementation-Version"] = rootProject.property('version')
}

jacoco {
    toolVersion = "0.8.4"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/reports/jacocoHtml")
    }
}

project.ext.jacocoOfflineSourceSets = [ 'main' ]
task doJacocoOfflineInstrumentation(dependsOn: [ classes, project.configurations.jacocoAnt ]) {
    inputs.files classes.outputs.files
    File outputDir = new File(project.buildDir, 'instrumentedClasses')
    outputs.dir outputDir
    doFirst {
        project.delete(outputDir)
        ant.taskdef(
                resource: 'org/jacoco/ant/antlib.xml',
                classpath: project.configurations.jacocoAnt.asPath,
                uri: 'jacoco'
        )
        def instrumented = false
        jacocoOfflineSourceSets.each { sourceSetName ->
            if (file(sourceSets[sourceSetName].java.outputDir).exists()) {
                def instrumentedClassedDir = "${outputDir}/${sourceSetName}"
                ant.'jacoco:instrument'(destdir: instrumentedClassedDir) {
                    fileset(dir: sourceSets[sourceSetName].java.outputDir, includes: '**/*.class')
                }
                sourceSets.test.runtimeClasspath -= files(sourceSets[sourceSetName].java.outputDir)
                sourceSets.test.runtimeClasspath += files(instrumentedClassedDir)
                instrumented = true
            }

        }
        if (instrumented) {
            test.jvmArgs += '-noverify'
        }
    }
}
sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            compileClasspath += sourceSets.main.output + configurations.testCompile
            runtimeClasspath += sourceSets.main.output + compileClasspath + configurations.testRuntime
            srcDir file('src/integrationTest/java')
        }
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter test
}


test.dependsOn(doJacocoOfflineInstrumentation)
test.finalizedBy jacocoTestReport
//check.dependsOn integrationTest
//integrationTest.mustRunAfter test